# Задача №1. Общее обсуждение
# За день машина проезжает n километров. Сколько 
# дней нужно, чтобы проехать маршрут длиной m 
# километров? При решении этой задачи нельзя 
# пользоваться условной инструкцией if и циклами.
# Input:
# n = 700
# m = 750
# Output:
# 2

# n = int(input("n = "))
# m = int(input("m = "))

# print((m + n - 1) // n)

# Задача №3. Решение в группах
# В некоторой школе решили набрать три новых 
# математических класса и оборудовать кабинеты для 
# них новыми партами. За каждой партой может сидеть 
# два учащихся. Известно количество учащихся в 
# каждом из трех классов. Выведите наименьшее 
# число парт, которое нужно приобрести для них.

# Input: 20 21 22(ввод чисел НЕ в одну строку)
# Output: 32

# 20 -> 10
# 21 -> 11
# 22 -> 11

# a = int(input("a = "))
# b = int(input("b = "))
# c = int(input("c = "))

# print((a + 1) // 2 + (b + 1) // 2 + (c + 1) // 2)

# Вагоны в электричке пронумерованы натуральными 
# числами, начиная с 1 (при этом иногда вагоны 
# нумеруются от «головы» поезда, а иногда – с 
# «хвоста»; это зависит от того, в какую сторону едет 
# электричка). В каждом вагоне написан его номер. 
# Витя сел в i-й вагон от головы поезда и обнаружил, 
# что его вагон имеет номер j. Он хочет определить, 
# сколько всего вагонов в электричке. Напишите 
# программу, которая будет это делать или сообщать, 
# что без дополнительной информации это сделать 
# невозможно.
# Input: 3 4(ввод на разных строках)
# Output: 6

# i 1 2 3 4 5 6
#   - - - - - -
# j 6 5 4 3 2 1

# i = int(input("i = "))
# j = int(input("j = "))

# if i == j:
#     print ("Нужна доп информация")
# else:
#     print(i + j - 1)

# Задача №7. Решение в группах
# Дано натуральное число. Требуется определить, 
# является ли год с данным номером високосным. Если 
# год является високосным, то выведите YES, иначе 
# выведите NO. Напомним, что в соответствии с 
# григорианским календарем, год является 
# високосным, если его номер кратен 4, но не кратен 
# 100, а также если он кратен 400.
# Input: 2016
# Output: YES

# n = int(input("n = "))
# if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:
#    print("yes")
# else:
#    print("no")

# Задача 2: Найдите сумму цифр трехзначного числа. 
# 123 -> 6 (1 + 2 + 3)
# 100 -> 1 (1 + 0 + 0)

# n = 567

# c = n % 10
# n = n // 10
# b = n % 10
# a = n // 10

# print(a + b + c) 

# Задача 4: Петя, Катя и Сережа делают из бумаги журавликов. Вместе
# они сделали S журавликов. Сколько журавликов сделал каждый
# ребенок, если известно, что Петя и Сережа сделали одинаковое
# количество журавликов, а Катя сделала в два раза больше журавликов,
# чем Петя и Сережа вместе?

# 6 -> 1 4 1
# 24 -> 4 16 4
# 60 -> 10 40 10

# n = 6

# a = n // 6
# b = 4 * a 

# print(f'{a}, {b}, {a}')

# print((n // 6), ((n // 6) * 4), (n // 6))

# Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы
# расплачивались за проезд и получали билет с номером. Счастливым
# билетом называют такой билет с шестизначным номером, где сумма
# первых трех цифр равна сумме последних трех. Т.е. билет с номером
# 385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать
# программу, которая проверяет счастливость билета.

# 385916 -> yes
# 123456 -> no

# n = 345678

# n1 = n // 100000
# n2 = (n % 100000) // 10000
# n3 = (n % 10000) // 1000
# n4 = (n % 1000) // 100
# n5 = (n % 100) // 10
# n6 = n % 10

# if n1 + n2 + n3 == n4 + n5 + n6:
#    print("YES")

# else:
#    print("NO")

# Задача 8: Требуется определить, можно ли от шоколадки размером a
# × b долек отломить c долек, если разрешается сделать один разлом по
# прямой между дольками (то есть разломить шоколадку на два
# прямоугольника).

# 3 2 4 -> yes
# 3 2 1 -> no

# a = 3
# b = 2
# c = 1

# if c <= a * b and ((c % a == 0) or (c % b == 0)):
#     print("YES")

# else:
#      print("NO")

# Задача №9. Решение в группах
# По данному целому неотрицательному n вычислите 
# значение n!. N! = 1 * 2 * 3 * … * N (произведение всех 
# чисел от 1 до N) 0! = 1 Решить задачу используя цикл 
# while
# Input: 5 -- 5! = 1 * 2 * 3 * 4 * 5 = 120
# Output: 120 

# n = int(input('n = '))
# fact_res = 1
# i = 1
# while i <= n:
#     fact_res *= i
#     i += 1
# print(fact_res)

# # 2
# fact_res_2 = 1
# while n > 0:
#     fact_res_2 *= n
#     n -= 1
# print(fact_res_2)

# Дано натуральное число A > 1. 
# Определите, каким по счету числом Фибоначчи оно является, 
# то есть выведите такое число n, что φ(n)=A. 
# Если А не является числом Фибоначчи, выведите число -1.

# Input:   5
# Output:  6

# a = int(input())
# n0 = 0
# n1 = 1
# n2 = 0
# i = 2
# while n2 < a:
#     n2 = n0 + n1
#     n0, n1 = n1, n2
#     i += 1
#     if n2 > a:
#         i = -1

# print(i)

# Уставшие от необычно теплой зимы, жители решили узнать, 
# действительно ли это самая длинная оттепель за всю историю наблюдений за погодой. 
# Они обратились к синоптикам, а те, в свою очередь, занялись исследованиями 
# статистики за прошлые годы. Их интересует, сколько дней длилась самая длинная оттепель. 
# Оттепелью они называют период, в который среднесуточная температура ежедневно 
# превышала 0 градусов Цельсия. Напишите программу, помогающую синоптикам в работе.
# Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100). 
# В следующих строках располагается N целых чисел. 
# Каждое число – среднесуточная температура в соответствующий день. 
# Температуры – целые числа и лежат в диапазоне от –50 до 50

# Input:    6 -> -20 30 -40 50 10 -10
# Output: 2

# 1 variant

# days = int(input('Введите количество дней: '))
# max_len, count, temp = 0, 0, 0

# for i in range(days):
#     temp = int(input('Введите температуру: '))
#     if temp > 0:
#         count += 1
#         if count > max_len:
#             max_len = count
#     else:
#         count = 0

# print(f'\nМаксимальное количество теплых дней подряд - {max_len} дней')

# 2

# n = int(input('n = '))
# count = 0
# count_max = 0
# for i in range(n):
#     x = int(input())
#     if x > 0:
#         count += 1
#         if count > count_max:
#             count_max = count
#     else:
#         count = 0
# print(count_max)

# 15. Иван Васильевич пришел на рынок и решил купить два арбуза: 
# один для себя, а другой для тещи. Понятно, что для себя нужно 
# выбрать арбуз потяжелей, а для тещи полегче. Но вот незадача: 
# арбузов слишком много и он не знает как же выбрать самый легкий 
# и самый тяжелый арбуз? Помогите ему!
# Пользователь вводит одно число N – количество арбузов. Вторая строка содержит N чисел, 
# записанных на новой строчке каждое. Здесь каждое число – это масса соответствующего арбуза
# Input:	5 -> 5 1 6 5 9
# Output:	1 9

# |1 mode the bubble sort function 

# def bubble_sort(list1): 
#     # Outer loop for traverse the entire list 
#     for i in range(0,len(list1)-1): 
#         for j in range(len(list1)-1): 
#             if(list1[j]>list1[j+1]): 
#                 temp = list1[j] 
#                 list1[j] = list1[j+1] 
#                 list1[j+1] = temp 
#     return list1 
 
# list1 = [5, 3, 8, 6, 7] 
# print("The unsorted list is: ", list1) 
# # Calling the bubble sort function 
# print("The sorted list is: ", bubble_sort(list1)) 

# 2 mode max and min

# n = int(input('n = '))
# x = int(input())
# max_w = x
# min_w = x
# for i in range(n - 1):
#     x = int(input())
#     if x > max_w:
#         max_w = x
#     if x < min_w:
#         min_w = x

# print(max_w, min_w)

# Задача №17. Решение в группах
# Дан список чисел. Определите, сколько в нем 
# встречается различных чисел.
# Input: [1, 1, 2, 0, -1, 3, 4, 4]
# Output: 6
# Примечание: Пользователь может вводить значения 
# списка или список задан изначально.

# list1 = [1, 1, 2, 0, -1, 3, 4, 4]
# set1 = set(list1)
# print(len(set1))

# Дан массив, состоящий из целых чисел. 
# Напишите программу, которая подсчитает количество элементов массива, 
# больших предыдущего (элемента с предыдущим номером) 

# Input: [0, -1, 5, 2, 3]
# Output: 2 
# Пояснение: (-1 < 5, 2 < 3)

# Примечание: Пользователь может вводить значения списка или список задан изначально.

# 1 mode

# a = [0, -1, 5, 2, 3]
# x = a[0]
# count = 0
# for i in a:
#     if x < i:
#         count += 1
#     x = i
# print(count)

# 2 mode

# list1 = [0, -1, 5, 2, 3]
# count = 0
# for i in range(1, len(list1)):
#     if list1[i - 1] < list1[i]:
#         count += 1

# print(count)

# Дана последовательность из N целых чисел и число K. 
# Необходимо сдвинуть всю последовательность (сдвиг - циклический) 
# на K элементов вправо,  K – положительное число.

# Input:   [1, 2, 3, 4, 5] k = 3
# Output:  [3, 4, 5, 1, 2]

# Примечание: Пользователь может вводить значения списка или список задан изначально.

# list1 = [1, 2, 3, 4, 5]
# k = 13
# k = k % len(list1)
# res_list = []
# for i in range(k):
#     res_list.append(list1[len(list1) - k + i])
# print(res_list)
# for i in range(len(list1) - k):
#     res_list.append(list1[i])
# print(res_list)

# Напишите программу для печати всех уникальных значений в словаре. 

# Input:  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, 
#          {"VI": "S005"}, {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}] 

# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}

# Примечание: Список словарей задан изначально. 
# Пользователь его не вводит


# list1 = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V":"S009"}, {"VIII":"S007"}] 
# set_res = set()
# for dict_i in list1:
#     for key in dict_i.keys():
#         set_res.add(dict_i[key])

# print(set_res)


n = int(input())
list1 = []
for i in range(n):
    x = int(input())
    list1.append(x)

